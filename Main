targetScope = 'subscription'

@description('Provide a Resource Group Name. Example: rg-opm-lz-01')
param rgName string = 'rg-opm-lz-01'
@description('Provide a default Location. Example: eastus2')
param defLocation string = 'eastus2'
param defLocation2 string = 'centralus'

param defPurpose string = 'Program Office'
@allowed([
  'nonprod'
  'prod'
  'sandbox'
 
])


param environmentType string = 'sandbox'
@description('Current time generated by the utcNow() function')
param baseTime string = utcNow()

param resTags object = {
  E: environmentType
  P: defPurpose
  T: baseTime
}

param FISMA string = 'FISMA ID'

param vnName string = 'Please enter vnet name'
param vnPrefix string = '10.0.0.0/16'
param snName string = 'Please enter snet name'
param snPrefix string = '10.0.0.0/28'
param nsgName string = 'Please enter NSG name'

param vnName2 string = 'Please enter vnet name'
param vnPrefix2 string = '10.0.0.0/16'
param snName2 string = 'Please enter snet name'
param snPrefix2 string = '10.0.0.0/28'
param nsgName2 string = 'Please enter NSG name'

//param dns string = 'Please enter DNS server for centralus'
//param dnsEast string = 'Please enter DNS server for eastus'

param midName string = 'Please enter a Managed ID name'
param kvName string = 'Please enter a KeyVault name'
var keyName = 'key-2-'
param peName string = 'pe-kv-${uniqueString(rgName)}'
param rsvName string = 'Please enter a RSV name'


resource KVCryptoUserRoleDefinition 'Microsoft.Authorization/roleDefinitions@2018-01-01-preview' existing = {
  scope: subscription(subscription().subscriptionId)
  name: '12338af0-0e69-4776-bea7-57ae8d297424'
}

resource rg 'Microsoft.Resources/resourceGroups@2021-04-01' = {
  name: rgName
  location: defLocation
  tags: resTags
}

// Module to create a new Virtual Network and Subnet in east
module vn './../modules/new-net.bicep' = {
  name: 'vlan-1'
  scope: rg 
  params: {
    vnName: vnName
    vnPrefix: vnPrefix
    snName: snName
    snPrefix: snPrefix
    resTags: resTags
    vnLocation: defLocation

    }
}

// Module to create a new Virtual Network and Subnet in centralus
module vn2 './../modules/new-net.bicep' = {
  name: 'vlan-2'
  scope: rg 
  params: {
    vnName: vnName2
    vnPrefix: vnPrefix2
    snName: snName2
    snPrefix: snPrefix2
    resTags: resTags
    vnLocation: defLocation2

    }
}

// Module to create a new Network Security Group in east
module nsg './../modules/new-nsg.bicep' = {
  name: 'newNSGeast'
  scope: rg 
  params: {
    nsgName: nsgName
    resTags: resTags
    nsgLocation: defLocation
    }
}

// Module to create a new Network Security Group in centralus
module nsg2 './../modules/new-nsg.bicep' = {
  name: 'newNSGcentralus'
  scope: rg 
  params: {
    nsgName: nsgName2
    resTags: resTags
    nsgLocation: defLocation2
    }
}

// Attach Network Security Group to east Subnet
module setNSG './../modules/set-nsg.bicep' = {
  name: 'setNSGeast'
  scope: rg
  params: {
    nsgId: nsg.outputs.nsgId
    vnName: vnName
    snName: snName
    snPrefix: snPrefix
  }
  dependsOn:[
    nsg
  ]
}

// Attach Network Security Group to centralus Subnet
module setNSGcentralus './../modules/set-nsg.bicep' = {
  name: 'setNSGcentralus'
  scope: rg
  params: {
    nsgId: nsg2.outputs.nsgId
    vnName: vnName2
    snName: snName2
    snPrefix: snPrefix2
  }
  dependsOn:[
    nsg2
  ]
}

// Module to create a new User Assigned Managed Identity
module mid './modules/new-mid.bicep' = {
  scope: resourceGroup(subscription().subscriptionId,rgName)
  name: 'newMid'
  params: {
    midName: midName
    midLocation: defLocation
    resTags: resTags
  }
  dependsOn:[
    rg
  ]
}

// Module to create a new KeyVault
module kv './modules/new-kv.bicep' = {
  name: 'newKV'
  scope: resourceGroup(subscription().subscriptionId,rgName) 
  params: {
    kvName: kvName
    resTags: resTags
    kvLocation: defLocation
    keyName: keyName
    }
  dependsOn:[
    rg
  ]
}

// Module to create a Role Assignment for KeyVault access
module rakv './modules/new-ra.bicep' = {
  name: 'newRAKV'
  scope: resourceGroup(subscription().subscriptionId,rgName) 
  params: {
    resId: kv.outputs.kvId
    midId: mid.outputs.midId
    rdId: KVCryptoUserRoleDefinition.id
    }
  dependsOn:[
    rg
    kv
    mid
    KVCryptoUserRoleDefinition
  ]
}

// Module to create a new Private Endpoint
module pe './../modules/new-pe.bicep' = {
  name: 'newPE'
  scope: resourceGroup(subscription().subscriptionId,rgName) 
  params: {
    peName: peName
    resTags: resTags
    peLocation: defLocation
    snId: vn.outputs.snId
    kvId: kv.outputs.kvId
    }
  dependsOn:[
    rg
    vn
    kv
  ]
}

// Module to create a new Recovery Services Vault
module rsv './../modules/new-rsv.bicep' = {
  name: 'newRSV'
  scope: resourceGroup(subscription().subscriptionId,rgName) 
  params: {
    rsvName: rsvName
    resTags: resTags
    rsvLocation: defLocation
    midName: midName
    keyId: kv.outputs.keyId
  }
  dependsOn:[
    rg
    mid
    kv
  ]
}



// az ts create --name testing --version "1.0a" --resource-group rg-afk-templateSpecs --location "eastus2" --template-file "./template-jan19.bicep"

