targetScope = 'subscription'

@description('Provide a Resource Group Name. Example: rg-opm-lz-01')
param rgName string = 'rg-opm-lz-01'
@description('Provide a default Location to deploy resources to. Example: eastus2')
param defLocation string = 'eastus2'
param defLocation2 string = 'centralus'

@description('Provide deployments purpose to be used for tagging. Example: OPM Landing Zone Exploration')
param defPurpose string = 'OPM Landing Zone'
@description('Provide environment type to be used for tagging. Example: select from allowed options')
@allowed([
  'dev'
  'test'
  'prod'
])
param environmentType string = 'test'
@description('Current time generated by the utcNow() function')
param baseTime string = utcNow()

var resTags = {
  E: environmentType
  P: defPurpose
  T: baseTime
}

@description('Define virtual network address space. Example: 10.0.0.0/16')
param vnPrefix string = '10.0.0.0/16'
param vnPrefix2 string = '10.0.0.0/16'
@description('Define the subnet within virtual network address space. Example: 10.0.0.0/28')
param snPrefix string = '10.0.0.0/28'
param snPrefix2 string = '10.0.0.0/28'

var stgName = 'stg${uniqueString(rgName)}'

var vnName = 'vnet-1-${uniqueString(rgName)}'
var snName = 'snet-1-${uniqueString(rgName)}'

var vnName2 = 'vnet-2-${uniqueString(rgName)}'
var snName2 = 'snet-2-${uniqueString(rgName)}'

var nsgName = 'nsg-${uniqueString(rgName)}'
var midName = 'mid-${uniqueString(rgName)}-uami-01'
var kvName = 'kv-${uniqueString(rgName)}'
var keyName = 'key-2-${uniqueString(rgName)}'
var rsvName = 'rsv-${uniqueString(rgName)}'

var rgHub = 'rg-afk-templateSpecs'
var vnHub = 'vnet-iac-01'


resource KVCryptoUserRoleDefinition 'Microsoft.Authorization/roleDefinitions@2018-01-01-preview' existing = {
  scope: subscription(subscription().subscriptionId)
  name: '12338af0-0e69-4776-bea7-57ae8d297424'
}

resource rg 'Microsoft.Resources/resourceGroups@2021-04-01' = {
  name: rgName
  location: defLocation
  tags: resTags
}

resource vnH 'Microsoft.Network/virtualNetworks@2021-05-01' existing = {
  name: vnHub
  scope: resourceGroup(subscription().subscriptionId,rgHub)
}

// Module to create a new storage account
module stg './modules/new-stg.bicep' = {
  name: 'newStg'
  scope: rg
  params: {
    stgName: stgName
    resTags: resTags
    rgLocation: defLocation
    }
}

// Module to create a new Virtual Network and Subnet
module vn './modules/new-net.bicep' = {
  name: 'newVnet'
  scope: rg 
  params: {
    vnName: vnName
    vnPrefix: vnPrefix
    snName: snName
    snPrefix: snPrefix
    resTags: resTags
    vnLocation: defLocation
    }
}

// Module to create a second Virtual Network and Subnet
module vn2 './modules/new-net.bicep' = {
  name: 'newVnet2'
  scope: rg 
  params: {
    vnName: vnName2
    vnPrefix: vnPrefix2
    snName: snName2
    snPrefix: snPrefix2
    resTags: resTags
    vnLocation: defLocation2
    }
}
// Module to create a new Network Security Group
module nsg './modules/new-nsg.bicep' = {
  name: 'newNSG'
  scope: rg 
  params: {
    nsgName: nsgName
    resTags: resTags
    nsgLocation: defLocation
    }
}

// Attach Network Security Group to Subnet
module setNSG './modules/set-nsg.bicep' = {
  name: 'setNSG'
  scope: rg
  params: {
    nsgId: nsg.outputs.nsgId
    vnName: vnName
    snName: snName
    snPrefix: snPrefix
  }
  dependsOn:[
    nsg
  ]
}

// Module to create a new User Assigned Managed Identity
module mid './modules/new-mid.bicep' = {
  scope: resourceGroup(subscription().subscriptionId,rgName)
  name: 'newMid'
  params: {
    midName: midName
    midLocation: defLocation
    resTags: resTags
  }
  dependsOn:[
    rg
  ]
}

// Module to create a new KeyVault
module kv './modules/new-kv.bicep' = {
  name: 'newKV'
  scope: resourceGroup(subscription().subscriptionId,rgName) 
  params: {
    kvName: kvName
    resTags: resTags
    kvLocation: defLocation
    keyName: keyName
    }
  dependsOn:[
    rg
  ]
}

// Module to create a Role Assignment for KeyVault access
module rakv './modules/new-ra.bicep' = {
  name: 'newRAKV'
  scope: resourceGroup(subscription().subscriptionId,rgName) 
  params: {
    resId: kv.outputs.kvId
    midId: mid.outputs.midId
    rdId: KVCryptoUserRoleDefinition.id
    }
  dependsOn:[
    rg
    kv
    mid
    KVCryptoUserRoleDefinition
  ]
}

// Module to create a new Recovery Services Vault
module rsv './../modules/new-rsv.bicep' = {
  name: 'newRSV'
  scope: resourceGroup(subscription().subscriptionId,rgName) 
  params: {
    rsvName: rsvName
    resTags: resTags
    rsvLocation: defLocation
    midName: midName
    keyId: kv.outputs.keyId
  }
  dependsOn:[
    rg
    mid
    kv
  ]
}



// az ts create --name OPM TempSpec --version "1.0" --description "Template Spec, Iteration 1" --version-description "deploy resources to multiple regions" --resource-group rg-afk-templateSpecs --location "eastus2" --template-file "./template-opm01.bicep"
